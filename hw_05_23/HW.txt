я видел решение, поэтому не стал что-то там выдумывать. тему о Big(O) я понял.

void test1(int n)
{
   if (n==1)
      return;
   for (int i=1; i<=n; i++)
       for (int j=1; j<=n; j++)
           System.out.println("*");
           break;
}

O(n^2)


void test2(int n)
{
   int a = 0;
   for (i = 0; i < n; i++)
      for (j = n; j > i; j--)
          a = a + i + j;

}

O(n^2)


void test3(int n)
{
   int i, j, a = 0;
   for (i = n/2; i <=n; i++)
      for (j = 2; j <=n; j=j*2)
          a=a+n/2;   
}

O(nLogn)


void test4(int n)
{
   int a = 0, i = n;
   while (i > 0) {
      a += i;
      i /= 2;
   }
}

O(nLogn)
<<<<<<< HEAD

Классная задача за 30-ое мая

public class Main {
    public static void main(String[] args) {
        int [] array = new int[5];
        array[0] = 1;
        array[1] = 3;
        array[2] = 5;
        array[3] = 7;
        array[4] = 9;

        System.out.println(sum(array, 0));
    }

    public static int sum (int[] array, int n) {
        if (n == array.length) return 0;
        return array[n] + sum(array, n + 1);
    }
}
=======
>>>>>>> 5004a18e111eff8d844ce4672b3de99de3250fc0
